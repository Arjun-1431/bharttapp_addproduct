||----------------***************Premium page for upgrade plan start----------------***************||

"use client";

import { useState } from "react";

export default function PremiumPlanPage() {
  const [standeeCount3M, setStandeeCount3M] = useState(30);
  const [standeeCount6M, setStandeeCount6M] = useState(30);
  const [standeeCount12M, setStandeeCount12M] = useState(30);

  const pricePerExtra = 20; // ₹20 per extra standee
  const calculatePrice = (basePrice, count) => {
    const extra = count > 30 ? count - 30 : 0;
    return basePrice + extra * pricePerExtra;
  };

  const totalPrice3M = calculatePrice(1599, standeeCount3M);
  const totalPrice6M = calculatePrice(2999, standeeCount6M);
  const totalPrice12M = calculatePrice(5299, standeeCount12M);

  const renderPlan = (title, duration, standeeCount, setStandeeCount, totalPrice) => (
    <div className="group rounded-md bg-white p-2 text-left text-indigo-900 shadow-xl shadow-black/5 transition-transform hover:-translate-y-1">
      <div className="flex h-full cursor-pointer select-none flex-col items-center rounded-md">
        <div className="w-full p-4">
          <h3 className="text-2xl font-black text-indigo-700">{title}</h3>
        </div>

        <div className="w-full px-4 pb-2">
          <p className="text-2xl font-black leading-none">
            <span className="text-xs">₹</span>{totalPrice}
            <span className="text-base font-normal"> / {duration}</span>
          </p>
        </div>

        <div className="w-full px-4 mb-2 flex items-center justify-between">
          <p className="text-sm font-medium">Standee Quantity</p>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setStandeeCount((prev) => Math.max(30, prev - 1))}
              className="px-2 py-1 bg-gray-200 rounded"
            >
              -
            </button>
            <span className="text-sm font-semibold">{standeeCount}</span>
            <button
              onClick={() => setStandeeCount((prev) => prev + 1)}
              className="px-2 py-1 bg-gray-200 rounded"
            >
              +
            </button>
          </div>
        </div>

        <div className="w-full flex-1 p-4">
          <ul className="list-inside list-disc divide-y text-sm">
            <li className="flex items-start py-2 text-left">
              <p className="w-full">Invite up to 3 clients.</p>
            </li>
            <li className="flex items-start py-2 text-left">
              <p className="w-full">No contributors.</p>
            </li>
            <li className="flex items-start py-2 text-left">
              <p className="w-full">Support.</p>
            </li>
            <li className="flex items-start py-2 text-left">
              <p className="w-full">White-label.</p>
              <span className="whitespace-nowrap inline-flex rounded bg-gray-50 p-1 text-stone-500">add-on</span>
            </li>
          </ul>
        </div>

        <div className="w-full px-4 pb-4">
          <p className="group flex w-full items-center justify-center rounded py-1 text-center font-bold transition group-hover:bg-indigo-700 group-hover:text-white">
            Free Trial
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="ml-4 h-4 w-4"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              strokeWidth={2}
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M14 5l7 7m0 0l-7 7m7-7H3"
              />
            </svg>
          </p>
        </div>
      </div>
    </div>
  );

  return (
    <div>
      <div className="h-screen">
        <div className="relative mx-auto w-screen">
          <div className="absolute inset-0 bottom-32 bg-gradient-to-t from-blue-900 to-indigo-700 border-b-8 border-indigo-700"></div>
          <div className="relative mx-auto w-full max-w-screen-xl px-2 pt-20 text-left sm:px-10">
            <div className="mb-10">
              <h1 className="text-center text-4xl font-bold text-white sm:text-5xl">
                Transparent & Affordable Pricing
              </h1>
              <p className="mx-auto mt-4 max-w-xl text-center text-white/70">
                Whether you're a small business, freelancer, or enterprise —
                Bharat T App has a plan for you. Enjoy unlimited QR creation,
                smart tools, and powerful branding features. Start your journey
                with zero setup cost — no credit card required.
              </p>
            </div>

            <div className="mx-auto grid max-w-screen-xl grid-cols-1 gap-3 md:grid-cols-2 lg:grid-cols-3">
              {renderPlan("Monthly", "3 months", standeeCount3M, setStandeeCount3M, totalPrice3M)}
              {renderPlan("Half-Yearly", "6 months", standeeCount6M, setStandeeCount6M, totalPrice6M)}
              {renderPlan("Yearly", "1 year", standeeCount12M, setStandeeCount12M, totalPrice12M)}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

||----------------***************Premium page for upgrade plan End----------------***************||








||----------------***************Negative Review table start----------------***************||

"use client";
import CustomerNavBar from "@/app/components/CustomerNavBar";
import { useEffect, useState } from "react";
import axios from "axios";

const NegativeReviewsPage = ({ reviews, premiumData }) => {
  const [enrichedReviews, setEnrichedReviews] = useState([]);

  const formatDate = (dateString) => {
    const options = { year: "numeric", month: "long", day: "numeric" };
    return new Date(dateString).toLocaleDateString("en-GB", options); // Fixed locale
  };

  console.log("premiumData is:-", premiumData);

  useEffect(() => {
    const fetchProductDetails = async () => {
      const updated = await Promise.all(
        reviews.map(async (review) => {
          try {
            const res = await axios.post("http://localhost:3000/api/get-reviewprod-data", {
              product_id: review.prod_id,
            });

            return {
              ...review,
              productDetails: res.data?.data || {},
            };
          } catch (err) {
            console.error("Error fetching product data:", err);
            return {
              ...review,
              productDetails: null,
            };
          }
        })
      );
      setEnrichedReviews(updated);
    };

    if (reviews.length > 0) {
      fetchProductDetails();
    }
  }, [reviews]);

  return (
    <>
      <CustomerNavBar />
      <div className="min-h-screen bg-gray-50 p-6">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-8">
          Negative Reviews
        </h1>

        <div className="space-y-6 max-w-3xl mx-auto">
          {enrichedReviews.length === 0 ? (
            <p className="text-center text-gray-600">No negative reviews found.</p>
          ) : (
            enrichedReviews.map((review) => (
              <div
                key={review.id}
                className="bg-white shadow-lg rounded-xl p-5 flex items-start space-x-4"
              >
                {/* Avatar */}
                <div className="flex-shrink-0">
                  <div className="w-12 h-12 rounded-full bg-gray-300 flex items-center justify-center font-bold text-white">
                    {review.name
                      .split(" ")
                      .map((n) => n[0])
                      .join("")}
                  </div>
                </div>

                {/* Review Content */}
                <div className="flex-1">
                  <div className="flex justify-between items-center">
                    <div>
                      <h2 className="font-semibold text-gray-800">{review.name}</h2>
                      <p className="text-sm text-gray-500">{review.contact_info}</p>
                    </div>
                    <p className="text-sm text-gray-400">
                      {formatDate(review.date_submitted)}
                    </p>
                  </div>
                  <p className="mt-3 text-gray-700">{review.review_text}</p>

                  {/* Product Info */}
                  {review.productDetails && (
                    <div className="mt-4 text-sm text-gray-600 border-t pt-2">
                      <p><strong>Product Name:</strong> {review.productDetails.product_name}</p>
                      <p><strong>Product Type:</strong> {review.productDetails.type}</p>
                    </div>
                  )}
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </>
  );
};

export default NegativeReviewsPage;



||----------------***************Negative Review table start----------------***************||





||----------------***************add new colum in product table----------------***************||
ALTER TABLE product
ADD COLUMN nick_name VARCHAR(255) DEFAULT NULL;